# Generated by Django 2.2 on 2019-05-06 20:54

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import schedule.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('locations', '0002_auto_20190506_1401'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Day',
            fields=[
                ('day', models.IntegerField(choices=[(0, 'Mon'), (1, 'Tue'), (2, 'Wed'), (3, 'Thu'), (4, 'Fri'), (5, 'Sat'), (6, 'Sun')], primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['day'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('first_place_prize', models.CharField(blank=True, max_length=50)),
                ('second_place_prize', models.CharField(blank=True, max_length=50)),
                ('third_place_prize', models.CharField(blank=True, max_length=50)),
                ('additional_prize_info', models.TextField(blank=True)),
                ('status', models.CharField(blank=True, choices=[('S', 'Starting'), ('A', 'Active'), ('E', 'Ending'), ('T', 'Terminated')], max_length=1)),
                ('request_future_restart', models.BooleanField(default=False, verbose_name='request future restart')),
                ('base_teams', models.PositiveSmallIntegerField(blank=True, default=5, null=True)),
                ('base_rate', models.DecimalField(blank=True, decimal_places=2, default=125, max_digits=6, null=True)),
                ('incremental_teams', models.PositiveSmallIntegerField(blank=True, default=1, null=True)),
                ('incremental_rate', models.DecimalField(blank=True, decimal_places=2, default=1, max_digits=6, null=True)),
                ('day', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='schedule.Day')),
                ('host', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Time',
            fields=[
                ('time', models.TimeField(default=datetime.time(20, 0), primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['time'],
            },
        ),
        migrations.CreateModel(
            name='EventOccurrence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True)),
                ('change_host', models.BooleanField(default=False, verbose_name='change host')),
                ('status', models.CharField(choices=[('Game', 'Game'), ('No Game', 'No Game')], default='Game', max_length=7)),
                ('cancellation_reason', models.CharField(blank=True, choices=[('Low/No Attendance', 'Low or No Attendance'), ('Alternate Event', 'Alternate Event'), ('Holiday', 'Holiday'), ('Inclement Weather', 'Inclement Weather'), ('Renovations', 'Renovations'), ('Emergency', 'Emergency'), ('Other', 'Other')], help_text='Only required if "No Game" was chosen.', max_length=20)),
                ('cancelled_ahead', models.BooleanField(default=False, verbose_name='cancelled ahead')),
                ('time_started', models.TimeField(blank=True, help_text='Only required if "Game" was chosen.', null=True)),
                ('time_ended', models.TimeField(blank=True, help_text='Only required if "Game" was chosen.', null=True)),
                ('number_of_teams', models.PositiveIntegerField(blank=True, help_text='Only required if "Game" was chosen.', null=True)),
                ('scoresheet', models.FileField(blank=True, upload_to='scoresheets/')),
                ('notes', models.TextField(blank=True, help_text='Please include notes about the game here.For example, technical problems,customer issues, suggestions, etc...')),
                ('day', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_occurrences', to='schedule.Day')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_occurrences', to='schedule.Event')),
                ('host', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_occurrences', to=settings.AUTH_USER_MODEL)),
                ('time', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_occurrences', to='schedule.Time')),
            ],
            options={
                'ordering': ('date', 'time'),
            },
        ),
        migrations.CreateModel(
            name='EventImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, storage=schedule.models.OverwriteStorage(), upload_to=schedule.models.image_path)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images', to='schedule.Event')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='time',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='schedule.Time'),
        ),
        migrations.AddField(
            model_name='event',
            name='venue',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='locations.Venue'),
        ),
    ]
